apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: ekscluster-pipeline
spec:
  compositeTypeRef:
    apiVersion: aws.example.org/v1alpha1
    kind: CompositeEKSCluster
  pipeline:

    # ----------------------------
    # Step 1: Cluster IAM Role
    # ----------------------------
    - name: create-cluster-role
      functionRef:
        name: createCompositeResource
      step: create-cluster-role
      arguments:
        resources:
          - name: eks-cluster-role
            base:
              apiVersion: iam.aws.crossplane.io/v1beta1
              kind: Role
              spec:
                forProvider:
                  assumeRolePolicyDocument: |
                    {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Principal": {
                            "Service": "eks.amazonaws.com"
                          },
                          "Action": "sts:AssumeRole"
                        }
                      ]
                    }
                providerConfigRef:
                  name: aws-provider

          - name: eks-cluster-policy
            base:
              apiVersion: iam.aws.crossplane.io/v1beta1
              kind: RolePolicyAttachment
              spec:
                forProvider:
                  policyArn: arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
                  roleNameSelector:
                    matchControllerRef: true
                providerConfigRef:
                  name: aws-provider

          - name: eks-vpc-policy
            base:
              apiVersion: iam.aws.crossplane.io/v1beta1
              kind: RolePolicyAttachment
              spec:
                forProvider:
                  policyArn: arn:aws:iam::aws:policy/AmazonEKSVPCResourceController
                  roleNameSelector:
                    matchControllerRef: true
                providerConfigRef:
                  name: aws-provider

    # ----------------------------
    # Step 2: NodeGroup IAM Role
    # ----------------------------
    - name: create-nodegroup-role
      functionRef:
        name: createCompositeResource
      step: create-nodegroup-role
      arguments:
        resources:
          - name: eks-nodegroup-role
            base:
              apiVersion: iam.aws.crossplane.io/v1beta1
              kind: Role
              spec:
                forProvider:
                  assumeRolePolicyDocument: |
                    {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Principal": {
                            "Service": "ec2.amazonaws.com"
                          },
                          "Action": "sts:AssumeRole"
                        }
                      ]
                    }
                providerConfigRef:
                  name: aws-provider

          - name: nodegroup-worker-policy
            base:
              apiVersion: iam.aws.crossplane.io/v1beta1
              kind: RolePolicyAttachment
              spec:
                forProvider:
                  policyArn: arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
                  roleNameSelector:
                    matchControllerRef: true
                providerConfigRef:
                  name: aws-provider

          - name: nodegroup-cni-policy
            base:
              apiVersion: iam.aws.crossplane.io/v1beta1
              kind: RolePolicyAttachment
              spec:
                forProvider:
                  policyArn: arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
                  roleNameSelector:
                    matchControllerRef: true
                providerConfigRef:
                  name: aws-provider

          - name: nodegroup-ecr-policy
            base:
              apiVersion: iam.aws.crossplane.io/v1beta1
              kind: RolePolicyAttachment
              spec:
                forProvider:
                  policyArn: arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
                  roleNameSelector:
                    matchControllerRef: true
                providerConfigRef:
                  name: aws-provider

    # ----------------------------
    # Step 3: EKS Cluster
    # ----------------------------
    - name: create-eks-cluster
      functionRef:
        name: createCompositeResource
      step: create-eks-cluster
      arguments:
        resources:
          - name: eks-cluster
            base:
              apiVersion: eks.aws.crossplane.io/v1beta1
              kind: Cluster
              spec:
                forProvider:
                  region: us-east-1
                  version: "1.30"
                  roleArnSelector:
                    matchControllerRef: true
                  resourcesVpcConfig:
                    subnetIds: []
                    securityGroupIds: []
                providerConfigRef:
                  name: aws-provider
            patches:
              - type: FromCompositeFieldPath
                fromFieldPath: "spec.parameters.region"
                toFieldPath: "spec.forProvider.region"
              - type: FromCompositeFieldPath
                fromFieldPath: "spec.parameters.version"
                toFieldPath: "spec.forProvider.version"
              - type: FromCompositeFieldPath
                fromFieldPath: "spec.parameters.subnetIds"
                toFieldPath: "spec.forProvider.resourcesVpcConfig.subnetIds"
              - type: FromCompositeFieldPath
                fromFieldPath: "spec.parameters.securityGroupIds"
                toFieldPath: "spec.forProvider.resourcesVpcConfig.securityGroupIds"

    # ----------------------------
    # Step 4: Platform NodeGroup
    # ----------------------------
    - name: create-platform-nodegroup
      functionRef:
        name: createCompositeResource
      step: create-platform-nodegroup
      arguments:
        resources:
          - name: platform-nodegroup
            base:
              apiVersion: eks.aws.crossplane.io/v1alpha1
              kind: NodeGroup
              spec:
                forProvider:
                  clusterNameSelector:
                    matchControllerRef: true
                  nodeRoleArnSelector:
                    matchControllerRef: true
                  scalingConfig:
                    minSize: 1
                    maxSize: 5
                    desiredSize: 1
                  instanceTypes:
                    - t3.micro
                  subnetIds: []
                providerConfigRef:
                  name: aws-provider
            patches:
              - type: FromCompositeFieldPath
                fromFieldPath: "spec.parameters.platformMinSize"
                toFieldPath: "spec.forProvider.scalingConfig.minSize"
              - type: FromCompositeFieldPath
                fromFieldPath: "spec.parameters.subnetIds"
                toFieldPath: "spec.forProvider.subnetIds"

    # ----------------------------
    # Step 5: Application NodeGroup
    # ----------------------------
    - name: create-application-nodegroup
      functionRef:
        name: createCompositeResource
      step: create-application-nodegroup
      arguments:
        resources:
          - name: application-nodegroup
            base:
              apiVersion: eks.aws.crossplane.io/v1alpha1
              kind: NodeGroup
              spec:
                forProvider:
                  clusterNameSelector:
                    matchControllerRef: true
                  nodeRoleArnSelector:
                    matchControllerRef: true
                  scalingConfig:
                    minSize: 1
                    maxSize: 5
                    desiredSize: 1
                  instanceTypes:
                    - t3.micro
                  subnetIds: []
                providerConfigRef:
                  name: aws-provider
            patches:
              - type: FromCompositeFieldPath
                fromFieldPath: "spec.parameters.appMinSize"
                toFieldPath: "spec.forProvider.scalingConfig.minSize"
              - type: FromCompositeFieldPath
                fromFieldPath: "spec.parameters.subnetIds"
                toFieldPath: "spec.forProvider.subnetIds"
